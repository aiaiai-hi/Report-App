import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import io
from pathlib import Path
import warnings
from openpyxl import Workbook
from openpyxl.styles import Font
import os
import json

warnings.filterwarnings('ignore')

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_DIR = Path("–î–∞—à–±–æ—Ä–¥")
REPORTS_DATA_FILE = DATA_DIR / "reports_data.xlsx"
COMMENTS_DATA_FILE = DATA_DIR / "comments_data.json"

# –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
REQUESTS_DATA_FILE = DATA_DIR / "requests_data.xlsx"
REQUESTS_PROCESSED_FILE = DATA_DIR / "requests_processed.xlsx"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
DATA_DIR.mkdir(exist_ok=True)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞–º–∏",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
if 'admin_mode' not in st.session_state:
    st.session_state.admin_mode = False

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
def save_reports_data(df, comments=None):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Ñ–∞–π–ª"""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        df.to_excel(REPORTS_DATA_FILE, index=False)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        if comments:
            with open(COMMENTS_DATA_FILE, 'w', encoding='utf-8') as f:
                json.dump(comments, f, ensure_ascii=False, indent=2)
        
        return True
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return False

def save_requests_data(original_df, processed_df):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        original_df.to_excel(REQUESTS_DATA_FILE, index=False)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        processed_df.to_excel(REQUESTS_PROCESSED_FILE, index=False)
        
        return True
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: {str(e)}")
        return False

def load_requests_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    original_df = None
    processed_df = None
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if REQUESTS_DATA_FILE.exists():
            original_df = pd.read_excel(REQUESTS_DATA_FILE)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if REQUESTS_PROCESSED_FILE.exists():
            processed_df = pd.read_excel(REQUESTS_PROCESSED_FILE)
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: {str(e)}")
    
    return original_df, processed_df

def init_requests_data():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    if 'requests_data_initialized' not in st.session_state:
        original_df, processed_df = load_requests_data()
        
        st.session_state.request_original_data = original_df
        st.session_state.request_processed_data = processed_df
        
        st.session_state.requests_data_initialized = True

def load_reports_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –∏–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    df = None
    comments = {}
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if REPORTS_DATA_FILE.exists():
            df = pd.read_excel(REPORTS_DATA_FILE)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        if COMMENTS_DATA_FILE.exists():
            with open(COMMENTS_DATA_FILE, 'r', encoding='utf-8') as f:
                comments_data = json.load(f)
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–ª—é—á–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ int
                comments = {int(k): v for k, v in comments_data.items()}
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    
    return df, comments

def init_dashboard_data():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    if 'reports_data_initialized' not in st.session_state:
        df, comments = load_reports_data()
        
        if df is not None:
            st.session_state.reports_data = df
            st.session_state.reports_comments = comments
        else:
            st.session_state.reports_data = None
            st.session_state.reports_comments = {}
        
        st.session_state.reports_data_initialized = True
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    init_requests_data()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞
init_dashboard_data()

# CSS —Å—Ç–∏–ª–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .page-header {
        font-size: 2rem;
        font-weight: bold;
        color: #333;
        border-bottom: 2px solid #1f77b4;
        padding-bottom: 0.5rem;
        margin-bottom: 1.5rem;
    }
    .sidebar-header {
        font-size: 1.2rem;
        font-weight: bold;
        color: #1f77b4;
        margin-bottom: 1rem;
    }
    .admin-badge {
        background-color: #ff4b4b;
        color: white;
        padding: 0.2rem 0.5rem;
        border-radius: 0.3rem;
        font-size: 0.8rem;
        font-weight: bold;
    }
    .coming-soon {
        text-align: center;
        color: #666;
        font-style: italic;
        font-size: 1.2rem;
        margin-top: 3rem;
        padding: 2rem;
        border: 2px dashed #ccc;
        border-radius: 0.5rem;
    }
    
    .section-container {
        background-color: #f8f9fa;
        padding: 1.5rem;
        border-radius: 0.5rem;
        border-left: 4px solid #1f77b4;
        margin-bottom: 1rem;
    }
    
    .edit-mode-badge {
        background-color: #ff8c00;
        color: white;
        padding: 0.2rem 0.5rem;
        border-radius: 0.3rem;
        font-size: 0.7rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
        display: inline-block;
    }
    
    .section-text {
        margin: 0;
        line-height: 1.6;
        font-size: 1rem;
    }
    
    .stButton > button {
        width: 100% !important;
        background-color: transparent !important;
        border: none !important;
        border-radius: 0.5rem !important;
        padding: 0.4rem 0.75rem !important;
        text-align: left !important;
        color: #666 !important;
        font-weight: normal !important;
        margin-bottom: 0 !important;
        transition: all 0.2s ease !important;
        justify-content: flex-start !important;
        display: flex !important;
        align-items: center !important;
        min-height: 2.5rem !important;
        line-height: 1.1 !important;
    }
    
    .stButton {
        margin-bottom: 0rem !important;
    }
    
    [data-testid="stSidebar"] .stButton {
        margin-bottom: 0rem !important;
    }
 
    [data-testid="stSidebar"] .element-container {
        margin-bottom: 0rem !important;
    }        

    .stButton > button:hover {
        background-color: #d1d3d4 !important;
        color: #333 !important;
    }
    
    .stButton > button:focus {
        background-color: #d1d3d4 !important;
        color: #333 !important;
        box-shadow: none !important;
        outline: none !important;
    }
    
    .stButton > button[data-testid*="baseButton-secondary"] {
        background-color: #d1d3d4 !important;
        color: #333 !important;
        font-weight: 500 !important;
    }
    
    .stButton > button[kind="secondary"] {
        background-color: #d1d3d4 !important;
        color: #333 !important;
        font-weight: 500 !important;
    }
</style>
""", unsafe_allow_html=True)

# –ö–ª–∞—Å—Å ExcelTransformer
class ExcelTransformer:
    def __init__(self, report_number=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–∞
        
        Args:
            report_number (str): –ù–æ–º–µ—Ä –æ—Ç—á–µ—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–æ–≤ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        """
        self.report_number = report_number or "R001"
        self.supported_extensions = ['.xlsx', '.xls', '.csv']
        self.report_types = ["–†—É—á–Ω–æ–π", "–ü–æ–ª—É–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π", "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π", "–ò–õ–ê"]
    
    def detect_data_type(self, values):
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–∞
        
        Args:
            values: pandas Series —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç–æ–ª–±—Ü–∞
            
        Returns:
            str: —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö ('—Ç–µ–∫—Å—Ç', '—á–∏—Å–ª–æ', '–¥–∞—Ç–∞', '—Ñ–ª–∞–≥')
        """
        # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ NaN
        clean_values = values.dropna()
        if len(clean_values) == 0:
            return "—Ç–µ–∫—Å—Ç"
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        str_values = clean_values.astype(str).str.strip().str.lower()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±—É–ª–µ–≤—ã –∑–Ω–∞—á–µ–Ω–∏—è (—Ñ–ª–∞–≥–∏)
        bool_indicators = {
            '–¥–∞', '–Ω–µ—Ç', 'true', 'false', '1', '0', 'yes', 'no', 
            'y', 'n', '–≤–∫–ª', '–≤—ã–∫–ª', 'on', 'off', '–∞–∫—Ç–∏–≤–µ–Ω', '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'
        }
        unique_values = set(str_values.unique())
        if unique_values.issubset(bool_indicators) and len(unique_values) <= 3:
            return "—Ñ–ª–∞–≥"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–∞—Ç—ã
        date_count = 0
        for val in clean_values:
            if self._is_date(val):
                date_count += 1
        
        if date_count / len(clean_values) > 0.7:  # 70% –∑–Ω–∞—á–µ–Ω–∏–π - –¥–∞—Ç—ã
            return "–¥–∞—Ç–∞"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–∞
        numeric_count = 0
        for val in clean_values:
            if self._is_numeric(val):
                numeric_count += 1
        
        if numeric_count / len(clean_values) > 0.8:  # 80% –∑–Ω–∞—á–µ–Ω–∏–π - —á–∏—Å–ª–∞
            return "—á–∏—Å–ª–æ"
        
        return "—Ç–µ–∫—Å—Ç"
    
    def _is_date(self, value):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞—Ç–æ–π"""
        if pd.isna(value):
            return False
            
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –¥–∞—Ç—É
        date_formats = [
            '%d.%m.%Y', '%d/%m/%Y', '%Y-%m-%d', '%d-%m-%Y',
            '%d.%m.%y', '%d/%m/%y', '%y-%m-%d', '%d-%m-%y',
            '%Y.%m.%d', '%Y/%m/%d'
        ]
        
        str_val = str(value).strip()
        
        for fmt in date_formats:
            try:
                datetime.strptime(str_val, fmt)
                return True
            except ValueError:
                continue
                
        # –ü—Ä–æ–≤–µ—Ä–∏–º pandas to_datetime
        try:
            pd.to_datetime(str_val, errors='raise')
            return True
        except:
            return False
    
    def _is_numeric(self, value):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–º"""
        if pd.isna(value):
            return False
            
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ float
            float(str(value).replace(',', '.').replace(' ', ''))
            return True
        except ValueError:
            return False
    
    def load_from_uploaded_file(self, uploaded_file):
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ uploaded_file Streamlit
        
        Args:
            uploaded_file: —Ñ–∞–π–ª, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —á–µ—Ä–µ–∑ st.file_uploader
            
        Returns:
            pandas.DataFrame: –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        """
        try:
            file_extension = Path(uploaded_file.name).suffix.lower()
            
            if file_extension == '.csv':
                # –î–ª—è CSV –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
                try:
                    df = pd.read_csv(uploaded_file, sep=',', encoding='utf-8')
                    if len(df.columns) > 1:
                        return df
                except:
                    pass
                
                try:
                    uploaded_file.seek(0)  # –°–±—Ä–æ—Å —É–∫–∞–∑–∞—Ç–µ–ª—è —Ñ–∞–π–ª–∞
                    df = pd.read_csv(uploaded_file, sep=';', encoding='cp1251')
                    if len(df.columns) > 1:
                        return df
                except:
                    pass
                
                # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                uploaded_file.seek(0)
                df = pd.read_csv(uploaded_file)
                
            else:
                # –î–ª—è Excel —Ñ–∞–π–ª–æ–≤
                df = pd.read_excel(uploaded_file)
            
            return df
            
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
    
    def transform_to_metadata(self, df, report_type):
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ DataFrame –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        
        Args:
            df (pandas.DataFrame): –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            report_type (str): —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ (–†—É—á–Ω–æ–π, –ü–æ–ª—É–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π, –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π, –ò–õ–ê)
            
        Returns:
            pandas.DataFrame: –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        """
        metadata_list = []
        
        for idx, column in enumerate(df.columns, 1):
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü–∞
            column_data = df[column]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
            data_type = self.detect_data_type(column_data)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
            if report_type in ["–†—É—á–Ω–æ–π", "–ü–æ–ª—É–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π"]:
                tech_algorithm_to_be = "–†—É—á–Ω–æ–π –≤–≤–æ–¥"
                data_source_type = "–†—É—á–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ"
            else:  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–ª–∏ –ò–õ–ê
                tech_algorithm_to_be = ""
                data_source_type = "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
            
            # –°–≤—è–∑—å —Å –ò–° –¥–ª—è –ò–õ–ê
            system_connection = "–ò–õ–ê One" if report_type == "–ò–õ–ê" else ""
            
            metadata_record = {
                'ReportCode_info': '',  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ
                'Noreportfield_info': idx,
                'name': column,
                'description': '',
                'TechAsIs': '',
                'BussAlgorythm': '',
                'TechAlgorythm': tech_algorithm_to_be,
                'algorithms_change_info': '–Ω–µ—Ç',
                'dbobjectlink': '',
                'base_type_info': data_source_type,
                'related_it_system_info': system_connection,
                'reportfields_codes': '',
                'reportfields_names': '',
                'reportfields_parent_term': '',
                'reportfields_domain': '',
                'required_attribute_info': '–¥–∞',
                'base_type_report_field': data_type,
                'base_calc_ref_ind_info': '–ë–∞–∑–æ–≤—ã–π',
                'codeTable_info': '',
                'example': '',
                'isToDelete_info': ''
            }
            
            metadata_list.append(metadata_record)
        
        metadata_df = pd.DataFrame(metadata_list)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–¥ –∞—Ç—Ä–∏–±—É—Ç–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è DataFrame
        metadata_df['ReportCode_info'] = metadata_df['Noreportfield_info'].apply(
            lambda x: f"{self.report_number}_{x:03d}"
        )
        
        return metadata_df
    
    def create_excel_download(self, metadata_df):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
        
        Args:
            metadata_df (pandas.DataFrame): –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            
        Returns:
            bytes: –¥–∞–Ω–Ω—ã–µ Excel —Ñ–∞–π–ª–∞
        """
        output = io.BytesIO()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–∏–≥—É Excel
        wb = Workbook()
        ws = wb.active
        ws.title = "–ê—Ç—Ä–∏–±—É—Ç –æ—Ç—á–µ—Ç–∞"
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (—Å–∫—Ä—ã—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)
        technical_headers = [
            'ReportCode_info', 'Noreportfield_info', 'name', 'description', 'TechAsIs', 
            'BussAlgorythm', 'TechAlgorythm', 'algorithms_change_info', 'dbobjectlink', 
            'base_type_info', 'related_it_system_info', 'reportfields_codes', 
            'reportfields_names', 'reportfields_parent_term', 'reportfields_domain', 
            'required_attribute_info', 'base_type_report_field', 'base_calc_ref_ind_info', 
            'codeTable_info', 'example', 'isToDelete_info'
        ]
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–≤–∏–¥–∏–º–∞—è —Å—Ç—Ä–æ–∫–∞)
        user_headers = [
            '–ö–æ–¥ –∞—Ç—Ä–∏–±—É—Ç–∞ –æ—Ç—á–µ—Ç–∞', 
            '‚Ññ –∞—Ç—Ä–∏–±—É—Ç–∞ –æ—Ç—á–µ—Ç–∞', 
            '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞', 
            '–ë–∏–∑–Ω–µ—Å-–∞–ª–≥–æ—Ä–∏—Ç–º AS IS',
            '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º AS IS', 
            '–ë–∏–∑–Ω–µ—Å-–∞–ª–≥–æ—Ä–∏—Ç–º TO BE',
            '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º TO BE', 
            '–ê–ª–≥–æ—Ä–∏—Ç–º –∏–∑–º–µ–Ω–µ–Ω', 
            '–§–∏–∑–∏—á–µ—Å–∫–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã', 
            '–¢–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö',
            '–°–≤—è–∑—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π', 
            '–ö–æ–¥ —Ç–µ—Ä–º–∏–Ω–∞/—Ç–µ—Ä–º–∏–Ω–æ–≤',
            '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞/—Ç–µ—Ä–º–∏–Ω–æ–≤', 
            '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Å—É—â–Ω–æ—Å—Ç–∏ —Ç–µ—Ä–º–∏–Ω–∞/—Ç–µ—Ä–º–∏–Ω–æ–≤', 
            '–î–æ–º–µ–Ω —Ç–µ—Ä–º–∏–Ω–∞/—Ç–µ—Ä–º–∏–Ω–æ–≤', 
            '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è', 
            '–ë–∞–∑–æ–≤—ã–π —Ç–∏–ø –∞—Ç—Ä–∏–±—É—Ç–∞ (–¢–µ–∫—Å—Ç, –ß–∏—Å–ª–æ, –î–∞—Ç–∞, –§–ª–∞–≥)', 
            '–ü—Ä–∏–∑–Ω–∞–∫ –∞—Ç—Ä–∏–±—É—Ç–∞ (–ë–∞–∑–æ–≤—ã–π, –†–∞—Å—á–µ—Ç–Ω—ã–π, –°–ø—Ä–∞–≤–æ—á–Ω—ã–π)', 
            '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞', 
            '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ', 
            '–ü–æ–º–µ—á–µ–Ω –∫ —É–¥–∞–ª–µ–Ω–∏—é (–¥–∞/–Ω–µ—Ç)'
        ]
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (—Å–∫—Ä—ã—Ç—É—é)
        for col_idx, header in enumerate(technical_headers, 1):
            ws.cell(row=1, column=col_idx, value=header)
        
        # –°–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
        ws.row_dimensions[1].hidden = True
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤–æ –≤—Ç–æ—Ä—É—é —Å—Ç—Ä–æ–∫—É (–≤–∏–¥–∏–º—É—é)
        for col_idx, header in enumerate(user_headers, 1):
            cell = ws.cell(row=2, column=col_idx, value=header)
            # –î–µ–ª–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ–ª—É–∂–∏—Ä–Ω—ã–º–∏
            cell.font = Font(bold=True)
        
        # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏
        ws.freeze_panes = ws.cell(row=3, column=1)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—è —Å —Ç—Ä–µ—Ç—å–µ–π —Å—Ç—Ä–æ–∫–∏
        for row_idx, (_, row) in enumerate(metadata_df.iterrows(), 3):
            for col_idx, value in enumerate(row, 1):
                ws.cell(row=row_idx, column=col_idx, value=value)
        
        # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤ (—É—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤–∫–ª—é—á–∞—è –∑–∞–≥–æ–ª–æ–≤–∫–∏)
        for col_idx, column_letter in enumerate([chr(65 + i) for i in range(len(technical_headers))], 0):
            max_length = 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —Å—Ç—Ä–æ–∫—É
            if len(technical_headers) > col_idx:
                if len(str(technical_headers[col_idx])) > max_length:
                    max_length = len(str(technical_headers[col_idx]))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Å—Ç—Ä–æ–∫—É
            if len(user_headers) > col_idx:
                if len(str(user_headers[col_idx])) > max_length:
                    max_length = len(str(user_headers[col_idx]))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
            for row_idx in range(3, len(metadata_df) + 3):
                cell_value = ws.cell(row=row_idx, column=col_idx + 1).value
                if cell_value and len(str(cell_value)) > max_length:
                    max_length = len(str(cell_value))
            
            adjusted_width = min(max_length + 2, 50)
            ws.column_dimensions[column_letter].width = adjusted_width
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ BytesIO
        wb.save(output)
        output.seek(0)
        return output.getvalue()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
def calculate_completion_percentage(df, owner_filter=None):
    """–†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π"""
    if df is None or df.empty:
        return 0, 0
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –µ—Å–ª–∏ –∑–∞–¥–∞–Ω
    if owner_filter and owner_filter != "–í—Å–µ":
        df = df[df['–í–ª–∞–¥–µ–ª–µ—Ü –æ—Ç—á–µ—Ç–∞ –°–°–ü'] == owner_filter]
    
    if df.empty:
        return 0, 0
    
    total_cells = 0
    filled_cells = 0
    
    for _, row in df.iterrows():
        for col in df.columns:
            # –ò—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
            participation_value = row.get('–£—á–∞—Å—Ç–∏–µ –≤ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –†–§', '')
            if col == '–°–°–ü, –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º –ø–æ–¥—á–∏–Ω–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ, –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –†–§' and str(participation_value).lower() == '–Ω–µ—Ç':
                continue
            frequency_value = row.get('–ß–∞—Å—Ç–æ—Ç–∞ –æ—Ç—á–µ—Ç–∞', '')
            if col == '–ß–∞—Å—Ç–æ—Ç–∞ –æ—Ç—á–µ—Ç–∞ (—Ä—É—á–Ω–æ–π –≤–≤–æ–¥)' and str(frequency_value).lower() != '—Ä—É—á–Ω–æ–π –≤–≤–æ–¥':
                continue
            
            total_cells += 1
            if pd.notna(row[col]) and str(row[col]).strip() != '':
                filled_cells += 1
    
    completion_rate = (filled_cells / total_cells * 100) if total_cells > 0 else 0
    
    # –ü—Ä–æ—Ü–µ–Ω—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
    published_count = len(df[df['–≠—Ç–∞–ø –æ—Ç—á–µ—Ç–∞'] == '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω'])
    total_reports = len(df)
    published_rate = (published_count / total_reports * 100) if total_reports > 0 else 0
    
    return completion_rate, published_rate

def get_reports_needing_confirmation(df):
    """–û—Ç—á–µ—Ç—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏"""
    if df is None or df.empty:
        return pd.DataFrame()
    
    from datetime import datetime, timedelta
    import pandas as pd
    
    result_data = []
    current_date = datetime.now()
    
    for _, row in df.iterrows():
        last_publication = row.get('–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞')
        if pd.notna(last_publication):
            try:
                if isinstance(last_publication, str):
                    pub_date = pd.to_datetime(last_publication)
                else:
                    pub_date = last_publication
                
                actualization_date = pub_date + timedelta(days=365)  # +1 –≥–æ–¥
                days_until_actualization = (actualization_date - current_date).days
                
                if days_until_actualization <= 60:  # 2 –º–µ—Å—è—Ü–∞ –∏–ª–∏ –º–µ–Ω–µ–µ
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –¥–¥.–º–º.–≥–≥–≥–≥
                    pub_date_formatted = pub_date.strftime('%d.%m.%Y')
                    actualization_date_formatted = actualization_date.strftime('%d.%m.%Y')
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Å—è—Ü—ã –∏ –¥–Ω–∏
                    if days_until_actualization < 0:
                        # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ
                        abs_days = abs(days_until_actualization)
                        months = abs_days // 30
                        days = abs_days % 30
                        status_text = f"–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ {months} –º–µ—Å—è—Ü–µ–≤, {days} –¥–Ω–µ–π"
                        status_color = "üî¥"
                    else:
                        # –ù–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ
                        months = days_until_actualization // 30
                        days = days_until_actualization % 30
                        status_text = f"–û—Å—Ç–∞–ª–æ—Å—å {months} –º–µ—Å—è—Ü–µ–≤, {days} –¥–Ω–µ–π"
                        status_color = "üü¢"
                    
                    result_data.append({
                        '–ù–æ–º–µ—Ä —Ñ–æ—Ä–º—ã': row.get('–ù–æ–º–µ—Ä —Ñ–æ—Ä–º—ã', ''),
                        '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞': row.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞', ''),
                        '–í–ª–∞–¥–µ–ª–µ—Ü –æ—Ç—á–µ—Ç–∞ –°–°–ü': row.get('–í–ª–∞–¥–µ–ª–µ—Ü –æ—Ç—á–µ—Ç–∞ –°–°–ü', ''),
                        '–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏': pub_date_formatted,
                        '–î–∞—Ç–∞ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏': actualization_date_formatted,
                        '–°—Ç–∞—Ç—É—Å –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏': f"{status_color} {status_text}"
                    })
            except:
                continue
    
    return pd.DataFrame(result_data)

def get_reports_needing_update(df):
    """–û—Ç—á–µ—Ç—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
    if df is None or df.empty:
        return pd.DataFrame()
    
    result_data = []
    
    for _, row in df.iterrows():
        needs_update = False
        actions = []
        comments = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        status = row.get('–≠—Ç–∞–ø –æ—Ç—á–µ—Ç–∞', '')
        if status != '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω':
            needs_update = True
            actions.append("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–≤–µ—Å—Ç–∏ –æ—Ç—á–µ—Ç –¥–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
        empty_fields = []
        for col in df.columns:
            # –ò—Å–∫–ª—é—á–µ–Ω–∏—è
            participation_value = row.get('–£—á–∞—Å—Ç–∏–µ –≤ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –†–§', '')
            if col == '–°–°–ü, –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º –ø–æ–¥—á–∏–Ω–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ, –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –†–§' and str(participation_value).lower() == '–Ω–µ—Ç':
                continue
            frequency_value = row.get('–ß–∞—Å—Ç–æ—Ç–∞ –æ—Ç—á–µ—Ç–∞', '')
            if col == '–ß–∞—Å—Ç–æ—Ç–∞ –æ—Ç—á–µ—Ç–∞ (—Ä—É—á–Ω–æ–π –≤–≤–æ–¥)' and str(frequency_value).lower() != '—Ä—É—á–Ω–æ–π –≤–≤–æ–¥':
                continue
            
            if pd.isna(row[col]) or str(row[col]).strip() == '':
                empty_fields.append(col)
        
        if empty_fields:
            needs_update = True
            if status == '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω':
                actions.append("–°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—é")
            comments.append(f"–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è ({'; '.join(empty_fields)})")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∞–±–ª–æ–Ω–∞
        template_value = row.get('–®–∞–±–ª–æ–Ω –æ—Ç—á–µ—Ç–∞', '')
        if str(template_value).lower() == '–Ω–µ—Ç':
            needs_update = True
            comments.append("–î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        attributes_value = row.get('–ê—Ç—Ä–∏–±—É—Ç—ã –æ–ø–∏—Å–∞–Ω—ã', '')
        if str(attributes_value).lower() == '–Ω–µ—Ç':
            needs_update = True
            comments.append("–û–ø–∏—Å–∞—Ç—å –∞—Ç—Ä–∏–±—É—Ç—ã")
        
        if needs_update:
            result_data.append({
                '–ù–æ–º–µ—Ä —Ñ–æ—Ä–º—ã': row.get('–ù–æ–º–µ—Ä —Ñ–æ—Ä–º—ã', ''),
                '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞': row.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞', ''),
                '–≠—Ç–∞–ø –æ—Ç—á–µ—Ç–∞': status,
                '–í–ª–∞–¥–µ–ª–µ—Ü –æ—Ç—á–µ—Ç–∞ –°–°–ü': row.get('–í–ª–∞–¥–µ–ª–µ—Ü –æ—Ç—á–µ—Ç–∞ –°–°–ü', ''),
                '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è': '; '.join(actions),
                '–î–æ–ø. –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏': '; '.join(comments)
            })
    
    return pd.DataFrame(result_data)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.markdown('<div class="main-header">üìä –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞–º–∏</div>', unsafe_allow_html=True)

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
with st.sidebar:
    st.markdown('<div class="sidebar-header">üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è</div>', unsafe_allow_html=True)
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    st.markdown("**–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**")
    main_pages = {
        "üìà –î–∞—à–±–æ—Ä–¥ –ø–æ –æ—Ç—á–µ—Ç–∞–º": "dashboard",
        "‚ö° –î–µ–π—Å—Ç–≤–∏—è —Å –æ—Ç—á–µ—Ç–∞–º–∏": "actions",
        "üè∑Ô∏è –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∞—Ç—Ä–∏–±—É—Ç—ã": "attributes", 
        "‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã": "ai_assistant",
        "üìã –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è": "instructions",
        "üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å": "feedback"
    }
    
    # –î–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:
    if 'selected_page' not in st.session_state:
        st.session_state.selected_page = "üìà –î–∞—à–±–æ—Ä–¥ –ø–æ –æ—Ç—á–µ—Ç–∞–º"
    
    for page_name in main_pages.keys():
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π
        is_active = st.session_state.selected_page == page_name
        button_type = "secondary" if is_active else "primary"
        
        if st.button(page_name, key=f"btn_{main_pages[page_name]}", use_container_width=True, type=button_type):
            st.session_state.selected_page = page_name
            st.rerun()
    
    st.markdown("---")
    
    # –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    st.markdown("**–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å:**")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if 'admin_authenticated' not in st.session_state:
        st.session_state.admin_authenticated = False
    
    if not st.session_state.admin_authenticated:
        # –§–æ—Ä–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        st.markdown("üîê **–ê–¥–º–∏–Ω –≤—Ö–æ–¥**")
        
        with st.form("admin_login_form"):
            username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", placeholder="admin")
            password = st.text_input("–ü–∞—Ä–æ–ª—å:", type="password", placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
            login_button = st.form_submit_button("üîë –í–æ–π—Ç–∏", use_container_width=True)
            
            if login_button:
                if username == "admin" and password == "!!!!QQQQ2222":
                    st.session_state.admin_authenticated = True
                    st.session_state.admin_mode = True
                    st.success("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!")
                    st.rerun()
                else:
                    st.error("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å!")
    else:
        # –ê–¥–º–∏–Ω —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        st.session_state.admin_mode = True
        st.markdown('<span class="admin-badge">–ê–î–ú–ò–ù –†–ï–ñ–ò–ú</span>', unsafe_allow_html=True)
        
        if st.button("üö™ –í—ã–π—Ç–∏", key="admin_logout", use_container_width=True):
            st.session_state.admin_authenticated = False
            st.session_state.admin_mode = False
            st.success("üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω —Ä–µ–∂–∏–º–∞")
            st.rerun()
        st.markdown("")
    
    if st.session_state.admin_mode:
        
        admin_pages = {
            "üîç –ö–æ–Ω—Ç—Ä–æ–ª—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤": "admin_control",
            "üìä –î–∞—à–±–æ—Ä–¥ –ø–æ –æ—Ç—á–µ—Ç–∞–º": "admin_dashboard",
            "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏": "admin_stats", 
            "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã": "admin_issues"
        }
        
        # –î–ª—è –∞–¥–º–∏–Ω –º–µ–Ω—é:
        if 'selected_admin_page' not in st.session_state:
            st.session_state.selected_admin_page = None  # –ù–µ –≤—ã–±–∏—Ä–∞–µ–º –∞–¥–º–∏–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
        for page_name in admin_pages.keys():
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–∞ –∞–¥–º–∏–Ω –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π
            is_active = st.session_state.selected_admin_page == page_name
            button_type = "secondary" if is_active else "primary"
            
            if st.button(page_name, key=f"admin_btn_{admin_pages[page_name]}", use_container_width=True, type=button_type):
                st.session_state.selected_admin_page = page_name
                st.rerun()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
def show_instructions():
    st.markdown('<div class="page-header">üìã –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</div>', unsafe_allow_html=True)
    st.markdown('<div class="coming-soon">üöß –ó–¥–µ—Å—å –±—É–¥—É—Ç —Ä–∞–∑–º–µ—â–µ–Ω—ã –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –æ—Ç—á–µ—Ç–∞–º–∏</div>', unsafe_allow_html=True)

def show_actions():
    st.markdown('<div class="page-header">‚ö° –î–µ–π—Å—Ç–≤–∏—è —Å –æ—Ç—á–µ—Ç–∞–º–∏</div>', unsafe_allow_html=True)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
    if 'action_texts' not in st.session_state:
        st.session_state.action_texts = {
            'register': '–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–π—Ç–∏ –≤ –ë–∏–∑–Ω–µ—Å-–≥–ª–æ—Å—Å–∞—Ä–∏–π –∏ –≤ –ª–µ–≤–æ–º –º–µ–Ω—é –Ω–∞–π—Ç–∏ —Ä–∞–∑–¥–µ–ª "–ó–∞–ø—Ä–æ—Å—ã - –û—Ç—á–µ—Ç—ã". –í –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –≤—ã–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å".',
            'automate': '–ï—Å–ª–∏ —É –≤–∞—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –æ—Ç—á–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ "–≤—Ä—É—á–Ω—É—é", –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç—Ç–æ–º –æ—Ç—á–µ—Ç–µ –≤ –ë–∏–∑–Ω–µ—Å-–≥–ª–æ—Å—Å–∞—Ä–∏–∏. –ï—Å–ª–∏ "—Ä—É—á–Ω–æ–π –æ—Ç—á–µ—Ç" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ä–µ–µ—Å—Ç—Ä–µ –æ—Ç—á–µ—Ç–æ–≤, —Ç–æ –ø—Ä–µ–∂–¥–µ, —á–µ–º –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é "—Ä—É—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞". –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –∑–∞—è–≤–∫–µ –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞. –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä—É—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞/ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ ("—Ä—É—á–Ω–æ–π" –æ—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–π —Ñ–æ—Ä–º–µ –Ω–µ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è —Å –°–°–ü –∏–ª–∏ –†–§). –î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –ë–∏–∑–Ω–µ—Å-–≥–ª–æ—Å—Å–∞—Ä–∏–∏: –≤ –ª–µ–≤–æ–º –º–µ–Ω—é –Ω–∞–π—Ç–∏ —Ä–∞–∑–¥–µ–ª "–ó–∞–ø—Ä–æ—Å—ã - –û—Ç—á–µ—Ç—ã". –í –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –≤—ã–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å".',
            'update': '–ß—Ç–æ–±—ã –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç—á–µ—Ç ...',
            'change_owner': '–ß—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ—Ç—á–µ—Ç–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å 1 –∏–∑ 2—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: 1. –ù–∞–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É–∂–µ–±–Ω—É—é –∑–∞–ø–∏—Å–∫—É –≤ –∞–¥—Ä–µ—Å –î–ë–î –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ –∏–ª–∏ 2. –°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ—Ç—á–µ—Ç–∞ –≤ –ë–∏–∑–Ω–µ—Å-–≥–ª–æ—Å—Å–∞—Ä–∏–∏, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —É—Ç–æ—á–Ω–∏–≤ –§–ò–û –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ, –∫—Ç–æ –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ—Ç—á–µ—Ç, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–¥–∞—á–∏ –æ—Ç—á–µ—Ç–∞ –Ω–æ–≤–æ–º—É –≤–ª–∞–¥–µ–ª—å—Ü—É',
            'delete': '–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –æ—Ç—á–µ—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞. –ï—Å–ª–∏ –æ—Ç—á–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω, —Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–ª–æ–∂–∏—Ç—å BIQ, —É—Ç–æ—á–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –¥–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º–µ.'
        }
    
    # –†–∞–∑–¥–µ–ª—ã —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    sections = [
        {
            'key': 'register',
            'title': '1Ô∏è‚É£ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç',
            'icon': 'üìù'
        },
        {
            'key': 'automate', 
            'title': '2Ô∏è‚É£ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç',
            'icon': 'ü§ñ'
        },
        {
            'key': 'update',
            'title': '3Ô∏è‚É£ –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç', 
            'icon': 'üîÑ'
        },
        {
            'key': 'change_owner',
            'title': '4Ô∏è‚É£ –°–º–µ–Ω–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ—Ç—á–µ—Ç–∞',
            'icon': 'üë§'
        },
        {
            'key': 'delete',
            'title': '5Ô∏è‚É£ –£–¥–∞–ª–∏—Ç—å –æ—Ç—á–µ—Ç',
            'icon': 'üóëÔ∏è'
        }
    ]
    
    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
    tab_titles = [f"{section['icon']} {section['title']}" for section in sections]
    tabs = st.tabs(tab_titles)
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–∞–∂–¥–æ–π –≤–∫–ª–∞–¥–∫–∏
    for i, (tab, section) in enumerate(zip(tabs, sections)):
        key = section['key']
        title = section['title']
        icon = section['icon']
        
        with tab:
            # –ï—Å–ª–∏ –∞–¥–º–∏–Ω —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä
            if st.session_state.admin_mode:
                st.markdown('<span class="admin-badge">–†–ï–ñ–ò–ú –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø</span>', unsafe_allow_html=True)
                
                # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                edited_text = st.text_area(
                    f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç:",
                    value=st.session_state.action_texts[key],
                    height=200,
                    key=f"edit_{key}",
                    help="–í –∞–¥–º–∏–Ω —Ä–µ–∂–∏–º–µ –≤—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç"
                )
                
                # –ö–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —Å–±—Ä–æ—Å–∞
                col1, col2, col3 = st.columns([1, 1, 4])
                
                with col1:
                    if st.button(f"üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", key=f"save_{key}", type="primary"):
                        st.session_state.action_texts[key] = edited_text
                        st.success("‚úÖ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
                        st.rerun()
                
                with col2:
                    if st.button(f"üîÑ –°–±—Ä–æ—Å–∏—Ç—å", key=f"reset_{key}"):
                        st.warning("‚ö†Ô∏è –°–±—Ä–æ—Å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É")
                        st.rerun()
            
            else:
                # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
                st.markdown(f"""
                <div style="
                    background-color: #f8f9fa;
                    padding: 1.5rem;
                    border-radius: 0.5rem;
                    border-left: 4px solid #1f77b4;
                    margin-bottom: 1rem;
                ">
                    <p style="margin: 0; line-height: 1.6;">{st.session_state.action_texts[key]}</p>
                </div>
                """, unsafe_allow_html=True)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–Ω–∏–∑—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    st.markdown("### üìû –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?")
    st.info("""
    **–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ª—é–±–æ–º—É –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π:**
    - üìß –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞ email: support@company.com
    - üìû –ü–æ–∑–≤–æ–Ω–∏—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: +7 (xxx) xxx-xx-xx
    - üí¨ –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ä–∞–∑–¥–µ–ª–æ–º "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å (–ò–ò –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç)"
    """)
    
    # –ê–¥–º–∏–Ω –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if st.session_state.admin_mode:
        st.markdown("---")
        st.markdown("### üîß –ê–¥–º–∏–Ω –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        st.markdown('<span class="admin-badge">–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨</span>', unsafe_allow_html=True)
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric("–í—Å–µ–≥–æ —Ä–∞–∑–¥–µ–ª–æ–≤", len(sections))
        with col2:
            # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤ –≤–æ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–∞—Ö
            total_chars = sum(len(text) for text in st.session_state.action_texts.values())
            st.metric("–û–±—â–∏–π –æ–±—ä–µ–º —Ç–µ–∫—Å—Ç–∞", f"{total_chars} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤
        if st.button("üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ç–µ–∫—Å—Ç—ã", key="export_all_texts"):
            export_data = {
                "exported_at": datetime.now().isoformat(),
                "sections": []
            }
            
            for section in sections:
                export_data["sections"].append({
                    "title": section["title"],
                    "key": section["key"],
                    "text": st.session_state.action_texts[section["key"]]
                })
            
            import json
            json_string = json.dumps(export_data, ensure_ascii=False, indent=2)
            
            st.download_button(
                label="üíæ –°–∫–∞—á–∞—Ç—å JSON —Å —Ç–µ–∫—Å—Ç–∞–º–∏",
                data=json_string,
                file_name=f"action_texts_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json"
            )

def show_attributes():
    st.markdown('<div class="page-header">üè∑Ô∏è –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∞—Ç—Ä–∏–±—É—Ç—ã</div>', unsafe_allow_html=True)
    st.markdown("### –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Excel –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤")
    st.markdown("---")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state –¥–ª—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤
    if 'attr_file_processed' not in st.session_state:
        st.session_state.attr_file_processed = False
    if 'attr_transformer' not in st.session_state:
        st.session_state.attr_transformer = None
    if 'attr_df' not in st.session_state:
        st.session_state.attr_df = None
    if 'attr_uploaded_file_name' not in st.session_state:
        st.session_state.attr_uploaded_file_name = ""
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    col1, col2 = st.columns([1, 1])
    
    with col2:
        st.header("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞")
        uploaded_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ Excel –∏–ª–∏ CSV —Ñ–∞–π–ª",
            type=['xlsx', 'xls', 'csv'],
            help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: Excel (.xlsx, .xls) –∏ CSV (.csv)",
            key="attributes_file_uploader"
        )
    
    with col1:
        st.header("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
        report_number = st.text_input(
            "–ù–æ–º–µ—Ä –æ—Ç—á–µ—Ç–∞",
            value="R001",
            help="–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–æ–≤ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞",
            key="attributes_report_number"
        )
        
        report_type = st.selectbox(
            "–¢–∏–ø –æ—Ç—á–µ—Ç–∞",
            options=["–†—É—á–Ω–æ–π", "–ü–æ–ª—É–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π", "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π", "–ò–õ–ê"],
            help="–¢–∏–ø –æ—Ç—á–µ—Ç–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö",
            key="attributes_report_type"
        )
    
    if uploaded_file is not None:
        st.session_state.attr_uploaded_file_name = uploaded_file.name
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä
        transformer = ExcelTransformer(report_number=report_number)
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            df = transformer.load_from_uploaded_file(uploaded_file)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session state
            st.session_state.attr_transformer = transformer
            st.session_state.attr_df = df
            st.session_state.attr_file_processed = True
            
            st.success("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫", len(df))
            with col2:
                st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤", len(df.columns))
            with col3:
                st.metric("–ù–æ–º–µ—Ä –æ—Ç—á–µ—Ç–∞", report_number)
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –∞—Ç—Ä–∏–±—É—Ç–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞
            st.markdown("---")
            if st.button("üîÑ –í—ã–≥—Ä—É–∑–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç–Ω—ã–π —Å–æ—Å—Ç–∞–≤", type="primary", use_container_width=True, key="generate_attributes"):
                with st.spinner("–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö..."):
                    # –°–±—Ä–æ—Å —É–∫–∞–∑–∞—Ç–µ–ª—è —Ñ–∞–π–ª–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
                    uploaded_file.seek(0)
                    df_fresh = transformer.load_from_uploaded_file(uploaded_file)
                    metadata_df = transformer.transform_to_metadata(df_fresh, report_type)
                    
                    # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    excel_data = transformer.create_excel_download(metadata_df)
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                    filename = f"{report_number}_–∞—Ç—Ä–∏–±—É—Ç—ã.xlsx"
                    
                    st.success("‚úÖ –ê—Ç—Ä–∏–±—É—Ç–Ω—ã–π —Å–æ—Å—Ç–∞–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("–°–æ–∑–¥–∞–Ω–æ –∞—Ç—Ä–∏–±—É—Ç–æ–≤", len(metadata_df))
                    with col2:
                        st.metric("–¢–∏–ø –æ—Ç—á–µ—Ç–∞", report_type)
                    with col3:
                        type_stats = metadata_df['base_type_report_field'].value_counts()
                        most_common_type = type_stats.index[0] if len(type_stats) > 0 else "N/A"
                        st.metric("–û—Å–Ω–æ–≤–Ω–æ–π —Ç–∏–ø", most_common_type)
                    
                    # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    st.download_button(
                        label="üì• –°–∫–∞—á–∞—Ç—å –∞—Ç—Ä–∏–±—É—Ç–Ω—ã–π —Å–æ—Å—Ç–∞–≤",
                        data=excel_data,
                        file_name=filename,
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        type="primary",
                        use_container_width=True,
                        key="download_attributes"
                    )
                    
                    st.info("üí° **–°–æ–≤–µ—Ç**: –§–∞–π–ª –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å, –∑–∞–ø–æ–ª–Ω–∏–≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏. –ê —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
        
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

def show_dashboard():
    st.markdown('<div class="page-header">üìà –î–∞—à–±–æ—Ä–¥ –ø–æ –æ—Ç—á–µ—Ç–∞–º</div>', unsafe_allow_html=True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö (—Ç–µ–ø–µ—Ä—å –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–≥–¥–∞)
    if st.session_state.reports_data is None:
        st.warning("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        if st.button("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞"):
            df, comments = load_reports_data()
            if df is not None:
                st.session_state.reports_data = df
                st.session_state.reports_comments = comments
                st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
                st.rerun()
            else:
                st.error("‚ùå –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å.")
        
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω—ã—Ö
    df = st.session_state.reports_data.copy()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
    #with st.expander("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö", expanded=False):
    #    col1, col2, col3 = st.columns(3)
    #    with col1:
    #        st.metric("–í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤", len(df))
    #    with col2:
    #        comments_count = len([c for c in st.session_state.reports_comments.values() if c.strip()])
    #        st.metric("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤", comments_count)
    #    with col3:
    #        if REPORTS_DATA_FILE.exists():
    #            file_time = datetime.fromtimestamp(REPORTS_DATA_FILE.stat().st_mtime)
    #            st.metric("–û–±–Ω–æ–≤–ª–µ–Ω–æ", file_time.strftime('%d.%m.%Y'))

    # –§–∏–ª—å—Ç—Ä –ø–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –°–°–ü
    st.markdown("## üéØ –§–∏–ª—å—Ç—Ä—ã")
    if '–í–ª–∞–¥–µ–ª–µ—Ü –æ—Ç—á–µ—Ç–∞ –°–°–ü' in df.columns:
        owners = ['–í—Å–µ'] + sorted(df['–í–ª–∞–¥–µ–ª–µ—Ü –æ—Ç—á–µ—Ç–∞ –°–°–ü'].dropna().unique().tolist())
        selected_owner = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ—Ç—á–µ—Ç–∞ –°–°–ü", owners, key="dashboard_owner_filter")
    else:
        selected_owner = "–í—Å–µ"
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
    filtered_df = df.copy()
    if selected_owner != "–í—Å–µ":
        filtered_df = filtered_df[filtered_df['–í–ª–∞–¥–µ–ª–µ—Ü –æ—Ç—á–µ—Ç–∞ –°–°–ü'] == selected_owner]
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    st.markdown("## üìä –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
    completion_rate, published_rate = calculate_completion_percentage(filtered_df)
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric(
            "% –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π",
            f"{completion_rate:.1f}%",
            delta=None,
            help="–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π –≤ –æ—Ç—á–µ—Ç–∞—Ö"
        )
    
    with col2:
        st.metric(
            "% –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤",
            f"{published_rate:.1f}%",
            delta=None,
            help="–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç—á–µ—Ç–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω'"
        )
    
    with col3:
        st.metric(
            "–í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤",
            len(filtered_df),
            delta=None,
            help="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—á–µ—Ç–æ–≤"
        )
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    st.markdown("---")
    st.markdown("## üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ—Ç—á–µ—Ç–∞–º")
    
    # 1. –û—Ç—á–µ—Ç—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
    st.markdown("### üîî –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç—á–µ—Ç–æ–≤")
    confirmation_reports = get_reports_needing_confirmation(filtered_df)
    
    if not confirmation_reports.empty:
        st.dataframe(
            confirmation_reports,
            use_container_width=True,
            hide_index=True,
            column_config={
                "–ù–æ–º–µ—Ä —Ñ–æ—Ä–º—ã": st.column_config.TextColumn("–ù–æ–º–µ—Ä —Ñ–æ—Ä–º—ã", width="small"),
                "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞": st.column_config.TextColumn("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞", width="medium"),
                "–í–ª–∞–¥–µ–ª–µ—Ü –æ—Ç—á–µ—Ç–∞ –°–°–ü": st.column_config.TextColumn("–í–ª–∞–¥–µ–ª–µ—Ü –æ—Ç—á–µ—Ç–∞ –°–°–ü", width="small"),
                "–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏": st.column_config.TextColumn("–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", width="small"),
                "–î–∞—Ç–∞ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏": st.column_config.TextColumn("–î–∞—Ç–∞ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏", width="small"),
                "–°—Ç–∞—Ç—É—Å –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏": st.column_config.TextColumn("–°—Ç–∞—Ç—É—Å –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏", width="small")
            }
        )
    else:
        st.info("‚úÖ –ù–µ—Ç –æ—Ç—á–µ—Ç–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 2 –º–µ—Å—è—Ü–∞")
    
    # 2. –û—Ç—á–µ—Ç—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏
    st.markdown("### ‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤")
    update_reports = get_reports_needing_update(filtered_df)
    
    if not update_reports.empty:
        st.dataframe(
            update_reports,
            use_container_width=True,
            hide_index=True,
            column_config={
                "–ù–æ–º–µ—Ä —Ñ–æ—Ä–º—ã": st.column_config.TextColumn("–ù–æ–º–µ—Ä —Ñ–æ—Ä–º—ã", width="small"),
                "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞": st.column_config.TextColumn("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞", width="medium"),
                "–≠—Ç–∞–ø –æ—Ç—á–µ—Ç–∞": st.column_config.TextColumn("–≠—Ç–∞–ø –æ—Ç—á–µ—Ç–∞", width="small"),
                "–í–ª–∞–¥–µ–ª–µ—Ü –æ—Ç—á–µ—Ç–∞ –°–°–ü": st.column_config.TextColumn("–í–ª–∞–¥–µ–ª–µ—Ü –æ—Ç—á–µ—Ç–∞ –°–°–ü", width="small"),
                "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è": st.column_config.TextColumn("–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è", width="small"),
                "–î–æ–ø. –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏": st.column_config.TextColumn("–î–æ–ø. –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", width="smallm")
            }
        )
    else:
        st.info("‚úÖ –í—Å–µ –æ—Ç—á–µ—Ç—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã")
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    st.markdown("---")
    st.markdown("## üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ—Ç—á–µ—Ç–∞–º")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    col1, col2 = st.columns(2)
    with col1:
        if '–≠—Ç–∞–ø –æ—Ç—á–µ—Ç–∞' in df.columns:
            stages = ['–í—Å–µ'] + sorted(filtered_df['–≠—Ç–∞–ø –æ—Ç—á–µ—Ç–∞'].dropna().unique().tolist())
            selected_stage = st.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ —ç—Ç–∞–ø—É –æ—Ç—á–µ—Ç–∞", stages, key="dashboard_stage_filter")
        else:
            selected_stage = "–í—Å–µ"
    
    with col2:
        if '–¢–∏–ø —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞' in df.columns:
            types = ['–í—Å–µ'] + sorted(filtered_df['–¢–∏–ø —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞'].dropna().unique().tolist())
            selected_type = st.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è", types, key="dashboard_type_filter")
        else:
            selected_type = "–í—Å–µ"
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    if selected_stage != "–í—Å–µ":
        filtered_df = filtered_df[filtered_df['–≠—Ç–∞–ø –æ—Ç—á–µ—Ç–∞'] == selected_stage]
    if selected_type != "–í—Å–µ":
        filtered_df = filtered_df[filtered_df['–¢–∏–ø —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞'] == selected_type]
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫
    def highlight_empty_cells(df):
        def style_func(val):
            if pd.isna(val) or str(val).strip() == '':
                return 'background-color: #ffcccc'
            return ''
        return df.style.applymap(style_func)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
    display_df = filtered_df.copy()
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ –¥–¥.–º–º.–≥–≥–≥–≥
    date_columns = ['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞', '–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞']
    for col in date_columns:
        if col in display_df.columns:
            display_df[col] = pd.to_datetime(display_df[col], errors='coerce').dt.strftime('%d.%m.%Y')
            display_df[col] = display_df[col].replace('NaT', '')
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π —à–∏—Ä–∏–Ω–æ–π
    column_config = {}
    for col in display_df.columns:
        column_config[col] = st.column_config.TextColumn(col, width="small")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    styled_df = highlight_empty_cells(display_df)
    st.dataframe(
        styled_df,
        use_container_width=True,
        hide_index=True,
        height=400,
        column_config=column_config
    )
    
    # –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if st.button("üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"):
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            filtered_df.to_excel(writer, sheet_name='–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã', index=False)
            confirmation_reports.to_excel(writer, sheet_name='–¢—Ä–µ–±—É—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è', index=False)
            update_reports.to_excel(writer, sheet_name='–¢—Ä–µ–±—É—é—Ç –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏', index=False)
        
        st.download_button(
            label="üìÅ –°–∫–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É",
            data=output.getvalue(),
            file_name=f"analytics_reports_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

def show_ai_assistant():
    st.markdown('<div class="page-header">‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã</div>', unsafe_allow_html=True)
    st.markdown('<div class="coming-soon">üöß –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã</div>', unsafe_allow_html=True)

def show_feedback():
    st.markdown('<div class="page-header">üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å</div>', unsafe_allow_html=True)
    st.markdown('<div class="coming-soon">üöß –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ñ–æ—Ä–º–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</div>', unsafe_allow_html=True)

def show_admin_control():
    st.markdown('<div class="page-header">üîç –ö–æ–Ω—Ç—Ä–æ–ª—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤</div>', unsafe_allow_html=True)
    st.markdown('<span class="admin-badge">–ê–î–ú–ò–ù</span>', unsafe_allow_html=True)
    
    st.markdown("## üìä –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —Å—Ç–∞–¥–∏–π —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è")
    st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∏ —Ç–µ–∫—É—â–∏—Ö —Å—Ç–∞–¥–∏–π")
    
    display_request_analysis()

def calculate_business_days(start_date, end_date):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –º–µ–∂–¥—É –¥–≤—É–º—è –¥–∞—Ç–∞–º–∏ –ø–æ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º—É –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∫–∞–ª–µ–Ω–¥–∞—Ä—é"""
    if pd.isna(start_date) or pd.isna(end_date):
        return 0
    
    try:
        # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π (–±–µ–∑ workalendar –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è)
        # –ò—Å–∫–ª—é—á–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ (—Å—É–±–±–æ—Ç–∞=5, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ=6)
        current_date = start_date
        business_days = 0
        
        while current_date <= end_date:
            if current_date.weekday() < 5:  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫=0, –ü—è—Ç–Ω–∏—Ü–∞=4
                business_days += 1
            current_date += timedelta(days=1)
        
        return business_days
    except Exception as e:
        return 0

def process_request_data(df):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º"""
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
    date_columns = ['created_at', 'ts_from', 'ts_to']
    for col in date_columns:
        if col in df.columns:
            try:
                df[col] = pd.to_datetime(df[col], format='%d.%m.%Y', errors='coerce')
            except:
                try:
                    df[col] = pd.to_datetime(df[col], format='%Y-%m-%d', errors='coerce')
                except:
                    df[col] = pd.to_datetime(df[col], errors='coerce')
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ created_at –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
    df_sorted = df.sort_values('created_at', ascending=False)
    
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ business_id
    unique_requests = df_sorted.drop_duplicates(subset='business_id', keep='first')
    
    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ business_id –Ω–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–Ω–µ–π –≤ —Ä–∞–±–æ—Ç–µ
    latest_records = df.groupby('business_id').apply(
        lambda x: x.loc[x['ts_from'].idxmax()] if x['ts_from'].notna().any() else x.iloc[-1]
    ).reset_index(drop=True)
    
    # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
    result_data = []
    
    for _, unique_row in unique_requests.iterrows():
        business_id = unique_row['business_id']
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–Ω–µ–π
        latest_row = latest_records[latest_records['business_id'] == business_id].iloc[0]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–∏ –≤ —Ä–∞–±–æ—Ç–µ (—Ä–∞–±–æ—á–∏–µ –¥–Ω–∏)
        if pd.notna(latest_row['ts_from']):
            days_in_work = calculate_business_days(latest_row['ts_from'], datetime.now())
        else:
            days_in_work = 0
        
        result_data.append({
            'business_id': int(business_id),
            'created_at': unique_row['created_at'].strftime('%d.%m.%Y') if pd.notna(unique_row['created_at']) else '',
            '—Ä–∞–±–æ—á–∏—Ö_–¥–Ω–µ–π_–≤_—Ä–∞–±–æ—Ç–µ': days_in_work,
            'form_type_report': unique_row.get('form_type_report', ''),
            'report_code': unique_row.get('report_code', ''),
            'report_name': unique_row.get('report_name', ''),
            'current_stage': unique_row.get('current_stage', ''),
            'ts_from': latest_row['ts_from'].strftime('%d.%m.%Y') if pd.notna(latest_row['ts_from']) else '',
            'analyst': unique_row.get('Analyst', ''),
            'request_owner': unique_row.get('request_owner', ''),
            'request_owner_ssp': unique_row.get('request_owner_ssp', '')
        })
    
    return pd.DataFrame(result_data)

def create_excel_download_requests(df):
    """–°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
    output = io.BytesIO()
    
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, sheet_name='–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤', index=False)
        
        # –ü–æ–ª—É—á–∞–µ–º workbook –∏ worksheet –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        workbook = writer.book
        worksheet = writer.sheets['–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤']
        
        # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
        for column in worksheet.columns:
            max_length = 0
            column_letter = column[0].column_letter
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 50)
            worksheet.column_dimensions[column_letter].width = adjusted_width
    
    output.seek(0)
    return output.getvalue()

def display_request_analysis():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ (–µ—Å–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã)
    if 'request_processed_data' not in st.session_state:
        st.session_state.request_processed_data = None
    if 'request_original_data' not in st.session_state:
        st.session_state.request_original_data = None
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if st.session_state.request_processed_data is not None:
        st.success(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(st.session_state.request_processed_data)} –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
        col1, col2 = st.columns(2)
        with col1:
            if REQUESTS_DATA_FILE.exists():
                file_time = datetime.fromtimestamp(REQUESTS_DATA_FILE.stat().st_mtime)
                st.info(f"üìÅ –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {file_time.strftime('%d.%m.%Y %H:%M')}")
        
        with col2:
            if REQUESTS_PROCESSED_FILE.exists():
                file_time = datetime.fromtimestamp(REQUESTS_PROCESSED_FILE.stat().st_mtime)
                st.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {file_time.strftime('%d.%m.%Y %H:%M')}")
    else:
        st.info("üìä –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    
    # –§–æ—Ä–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    st.markdown("---")
    st.subheader("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    
    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∑–∞–ø—Ä–æ—Å–∞—Ö",
        type=['csv', 'xlsx'],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–∞—Ö CSV, XLSX. –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã.",
        key="request_analysis_uploader"
    )
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞
    if uploaded_file is not None:
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ —á–∏—Ç–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º
            file_extension = uploaded_file.name.split('.')[-1].lower()
            
            if file_extension == 'csv':
                df = pd.read_csv(uploaded_file, encoding='utf-8')
            elif file_extension == 'xlsx':
                df = pd.read_excel(uploaded_file)
            else:
                st.error("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞!")
                return
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            df = df.dropna(how='all')
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≥–¥–µ business_id –ø—É—Å—Ç–æ–π
            if 'business_id' in df.columns:
                df = df.dropna(subset=['business_id'])
            else:
                st.error("‚ùå –í —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–æ–ª–±–µ—Ü 'business_id'")
                return
            
            st.session_state.request_original_data = df
            st.success(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –ù–∞–π–¥–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π.")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            try:
                processed_data = process_request_data(df)
                st.session_state.request_processed_data = processed_data
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                if save_requests_data(df, processed_data):
                    st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
                
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤
    if st.session_state.request_processed_data is None:
        if st.button("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤", key="req_load_from_files"):
            original_df, processed_df = load_requests_data()
            if processed_df is not None:
                st.session_state.request_original_data = original_df
                st.session_state.request_processed_data = processed_df
                st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–æ–≤!")
                st.rerun()
            else:
                st.error("‚ùå –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª.")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if st.session_state.request_processed_data is not None:
        display_request_results(st.session_state.request_processed_data)
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
    if st.session_state.request_processed_data is not None:
        st.markdown("---")
        st.markdown("### üóÇÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–∞—Ö:**")
            if REQUESTS_DATA_FILE.exists():
                file_size = REQUESTS_DATA_FILE.stat().st_size / 1024  # –≤ KB
                st.text(f"üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {file_size:.1f} KB")
            
            if REQUESTS_PROCESSED_FILE.exists():
                file_size = REQUESTS_PROCESSED_FILE.stat().st_size / 1024  # –≤ KB  
                st.text(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {file_size:.1f} KB")
        
        with col2:
            if st.button("üîÑ –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞", key="req_clear_data", help="–£–¥–∞–ª–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"):
                if st.session_state.get('confirm_clear_requests', False):
                    # –û—á–∏—â–∞–µ–º session state
                    st.session_state.request_original_data = None
                    st.session_state.request_processed_data = None
                    
                    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã
                    try:
                        if REQUESTS_DATA_FILE.exists():
                            REQUESTS_DATA_FILE.unlink()
                        if REQUESTS_PROCESSED_FILE.exists():
                            REQUESTS_PROCESSED_FILE.unlink()
                        
                        st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –æ—á–∏—â–µ–Ω—ã!")
                        st.session_state.confirm_clear_requests = False
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {str(e)}")
                    
                    st.rerun()
                else:
                    st.session_state.confirm_clear_requests = True
                    st.warning("‚ö†Ô∏è –ù–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏")
                    st.rerun()

def display_request_results(df):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ –ø–æ–∏—Å–∫–æ–º"""
    
    st.markdown("---")
    st.subheader("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
    
    # –°—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞
    st.subheader("üîé –ü–æ–∏—Å–∫")
    search_query = st.text_input(
        "–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –æ—Ç—á–µ—Ç–∞ (report_code) –∏–ª–∏ business_id:",
        placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç—á–µ—Ç–∞ –∏–ª–∏ business_id...",
        key="request_search"
    )
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–∏—Å–∫
    filtered_df = df.copy()
    if search_query:
        search_mask = (
            filtered_df['report_code'].astype(str).str.contains(search_query, case=False, na=False) |
            filtered_df['business_id'].astype(str).str.contains(search_query, case=False, na=False)
        )
        filtered_df = filtered_df[search_mask]
    
    # –§–∏–ª—å—Ç—Ä—ã
    st.subheader("üîß –§–∏–ª—å—Ç—Ä—ã")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        form_types = ['–í—Å–µ'] + sorted(df['form_type_report'].dropna().unique().tolist())
        selected_form_type = st.selectbox("–¢–∏–ø –æ—Ç—á–µ—Ç–∞:", form_types, key="req_form_type")
        
        analysts = ['–í—Å–µ'] + sorted(df['analyst'].dropna().unique().tolist())
        selected_analyst = st.selectbox("–ê–Ω–∞–ª–∏—Ç–∏–∫:", analysts, key="req_analyst")
    
    with col2:
        stages = ['–í—Å–µ'] + sorted(df['current_stage'].dropna().unique().tolist())
        selected_stage = st.selectbox("–¢–µ–∫—É—â–∞—è —Å—Ç–∞–¥–∏—è:", stages, key="req_stage")
        
        owners = ['–í—Å–µ'] + sorted(df['request_owner'].dropna().unique().tolist())
        selected_owner = st.selectbox("–í–ª–∞–¥–µ–ª–µ—Ü –∑–∞–ø—Ä–æ—Å–∞:", owners, key="req_owner")
    
    with col3:
        owner_ssps = ['–í—Å–µ'] + sorted(df['request_owner_ssp'].dropna().unique().tolist())
        selected_owner_ssp = st.selectbox("–í–ª–∞–¥–µ–ª–µ—Ü –°–°–ü:", owner_ssps, key="req_owner_ssp")
        
        min_days = st.number_input("–ú–∏–Ω. —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π:", min_value=0, value=0, key="req_min_days")
    
    with col4:
        max_days = st.number_input("–ú–∞–∫—Å. —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π:", min_value=0, value=1000, key="req_max_days")
        
        # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", key="req_reset_filters"):
            st.rerun()
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if selected_form_type != '–í—Å–µ':
        filtered_df = filtered_df[filtered_df['form_type_report'] == selected_form_type]
    
    if selected_stage != '–í—Å–µ':
        filtered_df = filtered_df[filtered_df['current_stage'] == selected_stage]
    
    if selected_analyst != '–í—Å–µ':
        filtered_df = filtered_df[filtered_df['analyst'] == selected_analyst]
    
    if selected_owner != '–í—Å–µ':
        filtered_df = filtered_df[filtered_df['request_owner'] == selected_owner]
    
    if selected_owner_ssp != '–í—Å–µ':
        filtered_df = filtered_df[filtered_df['request_owner_ssp'] == selected_owner_ssp]
    
    filtered_df = filtered_df[
        (filtered_df['—Ä–∞–±–æ—á–∏—Ö_–¥–Ω–µ–π_–≤_—Ä–∞–±–æ—Ç–µ'] >= min_days) & 
        (filtered_df['—Ä–∞–±–æ—á–∏—Ö_–¥–Ω–µ–π_–≤_—Ä–∞–±–æ—Ç–µ'] <= max_days)
    ]
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π", len(df))
    with col2:
        st.metric("üîç –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏", len(filtered_df))
    with col3:
        if len(filtered_df) > 0:
            avg_days = filtered_df['—Ä–∞–±–æ—á–∏—Ö_–¥–Ω–µ–π_–≤_—Ä–∞–±–æ—Ç–µ'].mean()
            st.metric("üìÖ –°—Ä–µ–¥–Ω–µ–µ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π", f"{avg_days:.1f}")
        else:
            st.metric("üìÖ –°—Ä–µ–¥–Ω–µ–µ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π", "0")
    with col4:
        if len(filtered_df) > 0:
            max_days_value = filtered_df['—Ä–∞–±–æ—á–∏—Ö_–¥–Ω–µ–π_–≤_—Ä–∞–±–æ—Ç–µ'].max()
            st.metric("‚è∞ –ú–∞–∫—Å–∏–º—É–º —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π", max_days_value)
        else:
            st.metric("‚è∞ –ú–∞–∫—Å–∏–º—É–º —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π", "0")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    st.subheader("üìã –¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    if len(filtered_df) > 0:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
        column_config = {
            'business_id': st.column_config.NumberColumn('business_id', format='%d', width="medium"),
            'created_at': st.column_config.TextColumn('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', width="medium"),
            '—Ä–∞–±–æ—á–∏—Ö_–¥–Ω–µ–π_–≤_—Ä–∞–±–æ—Ç–µ': st.column_config.NumberColumn('–†–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –≤ —Ä–∞–±–æ—Ç–µ', format='%d', width="medium"),
            'form_type_report': st.column_config.TextColumn('–¢–∏–ø –æ—Ç—á–µ—Ç–∞', width="medium"),
            'report_code': st.column_config.TextColumn('–ö–æ–¥ –æ—Ç—á–µ—Ç–∞', width="medium"),
            'report_name': st.column_config.TextColumn('–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞', width="medium"),
            'current_stage': st.column_config.TextColumn('–¢–µ–∫—É—â–∞—è —Å—Ç–∞–¥–∏—è', width="medium"),
            'ts_from': st.column_config.TextColumn('–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞', width="medium"),
            'analyst': st.column_config.TextColumn('–ê–Ω–∞–ª–∏—Ç–∏–∫', width="medium"),
            'request_owner': st.column_config.TextColumn('–í–ª–∞–¥–µ–ª–µ—Ü –∑–∞–ø—Ä–æ—Å–∞', width="medium"),
            'request_owner_ssp': st.column_config.TextColumn('–í–ª–∞–¥–µ–ª–µ—Ü –°–°–ü', width="medium")
        }
        
        st.dataframe(
            filtered_df,
            use_container_width=True,
            column_config=column_config,
            hide_index=True,
            height=400
        )
        
        # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel
        excel_data = create_excel_download_requests(filtered_df)
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞",
            data=excel_data,
            file_name=f"requests_analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            use_container_width=True,
            key="req_download"
        )
    else:
        st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã.")
    

def show_admin_dashboard():
    st.markdown('<div class="page-header">üìä –î–∞—à–±–æ—Ä–¥ –ø–æ –æ—Ç—á–µ—Ç–∞–º</div>', unsafe_allow_html=True)
    st.markdown('<span class="admin-badge">–ê–î–ú–ò–ù</span>', unsafe_allow_html=True)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if st.session_state.reports_data is not None:
        st.success(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(st.session_state.reports_data)} –æ—Ç—á–µ—Ç–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
        col1, col2 = st.columns(2)
        with col1:
            if REPORTS_DATA_FILE.exists():
                file_time = datetime.fromtimestamp(REPORTS_DATA_FILE.stat().st_mtime)
                st.info(f"üìÅ –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö: {file_time.strftime('%d.%m.%Y %H:%M')}")
        
        with col2:
            if COMMENTS_DATA_FILE.exists():
                file_time = datetime.fromtimestamp(COMMENTS_DATA_FILE.stat().st_mtime)
                st.info(f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {file_time.strftime('%d.%m.%Y %H:%M')}")
    else:
        st.info("üìä –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    st.markdown("---")
    st.markdown("## üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤")
    
    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç—á–µ—Ç–æ–≤",
        type=['xlsx', 'xls', 'csv'],
        key="reports_file_uploader",
        help="–ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –¥–ª—è —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö –æ—Ç—á–µ—Ç–æ–≤"
    )
    
    if uploaded_file is not None:
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            if uploaded_file.name.endswith('.csv'):
                new_df = pd.read_csv(uploaded_file)
            else:
                new_df = pd.read_excel(uploaded_file)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            old_comments = st.session_state.reports_comments.copy()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            st.session_state.reports_data = new_df
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            new_comments = {}
            if not new_df.empty and old_comments:
                for old_idx, comment in old_comments.items():
                    # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –Ω–æ–º–µ—Ä—É —Ñ–æ—Ä–º—ã –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é –æ—Ç—á–µ—Ç–∞
                    if old_idx < len(st.session_state.reports_data):
                        old_report_info = st.session_state.reports_data.iloc[old_idx] if old_idx < len(st.session_state.reports_data) else None
                        if old_report_info is not None:
                            # –ò—â–µ–º —Ç–æ—Ç –∂–µ –æ—Ç—á–µ—Ç –≤ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                            for new_idx, row in new_df.iterrows():
                                if (str(row.get('–ù–æ–º–µ—Ä —Ñ–æ—Ä–º—ã', '')) == str(old_report_info.get('–ù–æ–º–µ—Ä —Ñ–æ—Ä–º—ã', '')) and
                                    str(row.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞', '')) == str(old_report_info.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞', ''))):
                                    new_comments[new_idx] = comment
                                    break
            
            st.session_state.reports_comments = new_comments
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            if save_reports_data(new_df, st.session_state.reports_comments):
                st.success("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
                
                preserved_comments = len(new_comments)
                if preserved_comments > 0:
                    st.info(f"üí¨ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {preserved_comments} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏")
            else:
                st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("–í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤", len(new_df))
            with col2:
                st.metric("–°—Ç–æ–ª–±—Ü–æ–≤ –¥–∞–Ω–Ω—ã—Ö", len(new_df.columns))
            with col3:
                owners_count = new_df['–í–ª–∞–¥–µ–ª–µ—Ü –æ—Ç—á–µ—Ç–∞ –°–°–ü'].nunique() if '–í–ª–∞–¥–µ–ª–µ—Ü –æ—Ç—á–µ—Ç–∞ –°–°–ü' in new_df.columns else 0
                st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤", owners_count)
        
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if st.session_state.reports_data is not None:
        df = st.session_state.reports_data.copy()
        
        st.markdown("---")
        st.markdown("## üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç—á–µ—Ç–æ–≤")
        
        # –§–∏–ª—å—Ç—Ä—ã
        col1, col2 = st.columns(2)
        with col1:
            if '–í–ª–∞–¥–µ–ª–µ—Ü –æ—Ç—á–µ—Ç–∞ –°–°–ü' in df.columns:
                owners = ['–í—Å–µ'] + sorted(df['–í–ª–∞–¥–µ–ª–µ—Ü –æ—Ç—á–µ—Ç–∞ –°–°–ü'].dropna().unique().tolist())
                selected_owner = st.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –°–°–ü", owners)
            else:
                selected_owner = "–í—Å–µ"
        
        with col2:
            if '–≠—Ç–∞–ø –æ—Ç—á–µ—Ç–∞' in df.columns:
                stages = ['–í—Å–µ'] + sorted(df['–≠—Ç–∞–ø –æ—Ç—á–µ—Ç–∞'].dropna().unique().tolist())
                selected_stage = st.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ —ç—Ç–∞–ø—É –æ—Ç—á–µ—Ç–∞", stages)
            else:
                selected_stage = "–í—Å–µ"
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        filtered_df = df.copy()
        if selected_owner != "–í—Å–µ":
            filtered_df = filtered_df[filtered_df['–í–ª–∞–¥–µ–ª–µ—Ü –æ—Ç—á–µ—Ç–∞ –°–°–ü'] == selected_owner]
        if selected_stage != "–í—Å–µ":
            filtered_df = filtered_df[filtered_df['–≠—Ç–∞–ø –æ—Ç—á–µ—Ç–∞'] == selected_stage]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        st.markdown(f"**–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∑–∞–ø–∏—Å–µ–π: {len(filtered_df)} –∏–∑ {len(df)}**")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫
        def highlight_empty_cells(df_display):
            def style_func(val):
                if pd.isna(val) or str(val).strip() == '':
                    return 'background-color: #ffcccc'
                return ''
            return df_display.style.applymap(style_func)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ –∞–¥–º–∏–Ω—Å–∫–æ–π —Ç–∞–±–ª–∏—Ü–µ
        admin_display_df = filtered_df.copy()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ –¥–¥.–º–º.–≥–≥–≥–≥
        date_columns = ['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞', '–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞']
        for col in date_columns:
            if col in admin_display_df.columns:
                admin_display_df[col] = pd.to_datetime(admin_display_df[col], errors='coerce').dt.strftime('%d.%m.%Y')
                admin_display_df[col] = admin_display_df[col].replace('NaT', '')
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π —à–∏—Ä–∏–Ω–æ–π
        admin_column_config = {}
        for col in admin_display_df.columns:
            admin_column_config[col] = st.column_config.TextColumn(col, width="small")
        
        styled_df = highlight_empty_cells(admin_display_df)
        st.dataframe(
            styled_df,
            use_container_width=True,
            hide_index=True,
            height=400,
            column_config=admin_column_config
        )
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
        st.markdown("---")
        st.markdown("### üí¨ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏")
        
        if not filtered_df.empty:
            # –í—ã–±–æ—Ä –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            report_options = []
            report_indices = []
            
            for idx, row in filtered_df.iterrows():
                option_text = f"{row.get('–ù–æ–º–µ—Ä —Ñ–æ—Ä–º—ã', 'N/A')} - {row.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞', 'N/A')}"
                report_options.append(option_text)
                report_indices.append(idx)
            
            selected_report_idx = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", 
                range(len(report_options)),
                format_func=lambda x: report_options[x]
            )
            
            if selected_report_idx is not None:
                actual_idx = report_indices[selected_report_idx]
                current_comment = st.session_state.reports_comments.get(actual_idx, '')
                
                new_comment = st.text_area(
                    "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", 
                    value=current_comment, 
                    height=100,
                    key="comment_editor"
                )
                
                col1, col2 = st.columns([1, 1])
                
                with col1:
                    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", type="primary"):
                        st.session_state.reports_comments[actual_idx] = new_comment
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Ñ–∞–π–ª
                        if save_reports_data(st.session_state.reports_data, st.session_state.reports_comments):
                            st.success("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
                        else:
                            st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
                        st.rerun()
                
                with col2:
                    if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"):
                        if actual_idx in st.session_state.reports_comments:
                            del st.session_state.reports_comments[actual_idx]
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Ñ–∞–π–ª
                            if save_reports_data(st.session_state.reports_data, st.session_state.reports_comments):
                                st.success("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–¥–∞–ª–µ–Ω!")
                            else:
                                st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
                            st.rerun()
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                comments_count = len([c for c in st.session_state.reports_comments.values() if c.strip()])
                if comments_count > 0:
                    st.info(f"üìù –í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {comments_count}")
        
        # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        st.markdown("---")
        st.markdown("### üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üìä –°–∫–∞—á–∞—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", type="primary"):
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ DataFrame
                export_df = filtered_df.copy()
                export_df['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'] = ''
                
                for idx in export_df.index:
                    if idx in st.session_state.reports_comments:
                        export_df.at[idx, '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'] = st.session_state.reports_comments[idx]
                
                # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
                output = io.BytesIO()
                with pd.ExcelWriter(output, engine='openpyxl') as writer:
                    export_df.to_excel(writer, sheet_name='–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã', index=False)
                
                st.download_button(
                    label="üìÅ –°–∫–∞—á–∞—Ç—å Excel —Ñ–∞–π–ª",
                    data=output.getvalue(),
                    file_name=f"filtered_reports_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
        
        with col2:
            if st.button("üíæ –°–∫–∞—á–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏"):
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ DataFrame
                export_df = df.copy()
                export_df['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'] = ''
                
                for idx in export_df.index:
                    if idx in st.session_state.reports_comments:
                        export_df.at[idx, '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'] = st.session_state.reports_comments[idx]
                
                # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
                output = io.BytesIO()
                with pd.ExcelWriter(output, engine='openpyxl') as writer:
                    export_df.to_excel(writer, sheet_name='–í—Å–µ –æ—Ç—á–µ—Ç—ã', index=False)
                
                st.download_button(
                    label="üìÅ –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π Excel —Ñ–∞–π–ª",
                    data=output.getvalue(),
                    file_name=f"all_reports_with_comments_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                    mime="application/vnd.openxmlformats-fficedocument.spreadsheetml.sheet"
                )

def show_admin_stats():
    st.markdown('<div class="page-header">üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</div>', unsafe_allow_html=True)
    st.markdown('<span class="admin-badge">–ê–î–ú–ò–ù</span>', unsafe_allow_html=True)
    st.markdown('<div class="coming-soon">üöß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º</div>', unsafe_allow_html=True)

def show_admin_issues():
    st.markdown('<div class="page-header">‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã</div>', unsafe_allow_html=True)
    st.markdown('<span class="admin-badge">–ê–î–ú–ò–ù</span>', unsafe_allow_html=True)
    st.markdown('<div class="coming-soon">üöß –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏</div>', unsafe_allow_html=True)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å - –∞–¥–º–∏–Ω –∏–ª–∏ –æ—Å–Ω–æ–≤–Ω—É—é
show_admin_page = False
if st.session_state.admin_mode and 'selected_admin_page' in st.session_state:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –Ω–∞–∂–∞—Ç–∞ –∞–¥–º–∏–Ω –∫–Ω–æ–ø–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π
    admin_pages = {
        "üîç –ö–æ–Ω—Ç—Ä–æ–ª—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤": "admin_control",
        "üìä –î–∞—à–±–æ—Ä–¥ –ø–æ –æ—Ç—á–µ—Ç–∞–º": "admin_dashboard", 
        "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏": "admin_stats",
        "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã": "admin_issues"
    }
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∞–¥–º–∏–Ω —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë
    if st.session_state.selected_admin_page in admin_pages.keys():
        show_admin_page = True

if show_admin_page:
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    admin_page_map = {
        "üîç –ö–æ–Ω—Ç—Ä–æ–ª—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤": show_admin_control,
        "üìä –î–∞—à–±–æ—Ä–¥ –ø–æ –æ—Ç—á–µ—Ç–∞–º": show_admin_dashboard,
        "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏": show_admin_stats, 
        "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã": show_admin_issues
    }
    admin_page_map[st.session_state.selected_admin_page]()
else:
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    main_page_map = {
        "üìà –î–∞—à–±–æ—Ä–¥ –ø–æ –æ—Ç—á–µ—Ç–∞–º": show_dashboard,
        "‚ö° –î–µ–π—Å—Ç–≤–∏—è —Å –æ—Ç—á–µ—Ç–∞–º–∏": show_actions,
        "üè∑Ô∏è –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∞—Ç—Ä–∏–±—É—Ç—ã": show_attributes,
        "‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã": show_ai_assistant,
        "üìã –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è": show_instructions,
        "üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å": show_feedback
    }
    main_page_map[st.session_state.selected_page]()

# –ü–æ–¥–≤–∞–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.markdown("---")
col1, col2, col3 = st.columns(3)
with col1:
    st.caption("üè¢ –ö–æ–º–ø–∞–Ω–∏—è XYZ")
with col2:
    st.caption("üìß support@company.com")
with col3:
    st.caption("üìû +7 (xxx) xxx-xx-xx")
